# 工作空间
[workspace]
resolver = "2"
members = [
    "crates/*",
    "macro/*",
    # "xx/*"
]

[workspace.package]
description = "搜索后展示的描述字段"
license = "MIT OR Apache-2.0"
keywords = ["rust", "learn"]
version = "0.1.0"
edition = "2021"
exclude = ["index.node"] # 发布时要排除的文件。
include = [
    "/src",
    "COPYRIGHT",
    "/examples",
    "!/examples/big_example",
] # 发布时要包含的文件。
rust-version = "1.65.0" # 最小 Rust 版本

# 文件中的函数需要添加 #[bench] 属性 才会测试，运行命令：cargo bench
# [[bench]]
# 基准测试的文件路径，
# path = "benches/decode.rs"
# 指定基准测试的名称
# name = "decode"
# 指定是否使用默认的基准测试框架。设置为 false 时，表示不使用默认的基准测试框架。
# harness = false

[workspace.metadata.docs.rs]
all-features = true
# 例：给 rustdoc 传递参数，可以根据这个配置标志在代码中使用#[cfg(docsrs)]属性来标记，只有在文档生成时才会包含这些被标记的内容
rustdoc-args = ["--cfg", "docsrs"]

[workspace.dependencies]
anyhow = "1.0.86"

# 解析 rust 源码: 对 TokenStream 解析的库，它提供了丰富的数据结构，对语法树中遇到的各种 Rust 语法都有支持。
# syn crate 默认所有数据结构都不带一些基本的 trait，比如 Debug，所以如果想打印数据结构的话，需要使用 extra-traits feature
syn = { version = "2.0.72", features = ["full"] }
# quote 用于将 Rust 语法树数据结构转化为源代码。
quote = "1.0.36"
# 可以很方便的处理宏里面 attributes
darling = "0.20.10"
# 由于 syn/quote 生成的 TokenStream 是 proc-macro2 的类型，所以还需要使用proc-macro2库，
# 它是对 proc-macro 的简单封装，使用起来更方便，而且可以让过程宏可以单元测试
proc-macro2 = "1.0.86"

askama = "0.12.1"

# cargo watch -x "run"
# cargo-watch = "8.1.2"

[profile.dev]
opt-level = 0
codegen-units = 16 # debug build will cause runtime panic if codegen-unints is default
debug = 2
incremental = true

# https://doc.rust-lang.org/cargo/reference/profiles.html
[profile.release]
# 控制 LLVM链接时间优化,可以使用整个程序分析来生成更好的优化代码，但代价是链接时间更长
lto = true
# 控制一个包将被分割成多少个"代码生成单元"。更多的代码生成单元允许并行处理更多的包，可能会减少编译时间，但可能会产生较慢的代码
codegen-units = 1
# 决定 Rust 对程序使用哪种程度的优化，0-3 范围
opt-level = 3
# 删除调试信息优化打包大小
strip = true
# pinic: 恐慌时的操作 默认为 展开 或 中断，展开时候程序会将调用栈往回走，清理内存，中断时候会直接停止程序，需要操作系统清理内存，但是这样打出的包小
panic = "abort"
# 是否开启断言调试
debug-assertions = false
