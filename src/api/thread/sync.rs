// 通过 Send 允许在线程间转移所有权
// Send 标记 trait 表明实现了 Send 的类型值的所有权可以在线程间传送。几乎所有的 Rust 类型都是Send 的，
// 不过有一些例外，包括 Rc<T>：这是不能 Send 的，因为如果克隆了 Rc<T> 的值并尝试将克隆的所有权转移到另一个线程，这两个线程都可能同时更新引用计数，导致问题

// Sync 允许多线程访问
// Sync 标记 trait 表明一个实现了 Sync 的类型可以安全的在多个线程中拥有其值的引用。
// 智能指针 Rc<T> 也不是 Sync 的，出于其不是 Send 相同的原因。
// RefCell<T> 和 Cell<T> 系列类型不是 Sync 的。
// RefCell<T> 在运行时所进行的借用检查也不是线程安全的。
// Mutex<T> 是 Sync 的，正如 “在线程间共享 Mutex<T>” 部分所讲的它可以被用来在多线程中共享访问。

// 手动实现 Send 和 Sync 是不安全的
// 通常并不需要手动实现 Send 和 Sync trait，因为由 Send 和 Sync 的类型组成的类型，自动就是 Send 和 Sync 的。
// 因为他们是标记 trait，甚至都不需要实现任何方法。他们只是用来加强并发相关的不可变性的。
