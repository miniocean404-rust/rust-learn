# Cargo.toml 配置网址： https://doc.rust-lang.org/cargo/reference/manifest.html
[package]
name = "syntax"
description = "搜索后展示的描述字段"
license = "MIT OR Apache-2.0"
keywords = ["rust", "learn"]
version = "0.1.0"
author = "MiniOcean404"
edition = "2021"
exclude = ["index.node"] # 发布时要排除的文件。
include = ["/src", "COPYRIGHT", "/examples", "!/examples/big_example"] # 发布时要包含的文件。
rust-version = "1.65.0" # 最小 Rust 版本

# default-run = "main" # 在指定 bin 时候指定 cargo run --package [workspace] --bin [bin 下文件] 这个指令中  --bin [bin 下文件] 的默认执行

[[bin]]
name = "main"
path = "./main.rs"

[lib]
name = "root_lib"
path = "./lib.rs"        # The source file of the target.
# test = true            # 是否测试
# doctest = true         # 测试文档示例
# bench = true           # 基准测试
# doc = true             # 文档
# proc-macro = false     # true 时 为一个 proc-macro 库
# harness = true         # Use libtest harness.
# edition = "2015"       # 目标版本
# crate-type = ["lib"]   # 要生成的crate类型
# required-features = [] # 构建此目标所需的特性(lib的N/A)。

# 包库依赖项。
[dependencies]
# Rust 编译 .node 模块给 Nodejs 调用: https://neon-bindings.com/
# 开启可编译 wasm 的库，让 rs 支持 js 特性
getrandom = { version = "0.2.8", features = ["js"] }
rand = "0.8.5"
tokio = { version = "1.21.2", features = ["full"] }

# 示例、测试和基准测试的依赖关系。
[dev-dependencies]

# 构建脚本的依赖项。
[build-dependencies]

# cargo watch -x "run"
# cargo-watch = "8.1.2"

[profile.dev]
opt-level = 0
codegen-units = 16   # debug build will cause runtime panic if codegen-unints is default
debug         = 2
incremental   = true

# https://doc.rust-lang.org/cargo/reference/profiles.html
[profile.release]
# 控制 LLVM链接时间优化,可以使用整个程序分析来生成更好的优化代码，但代价是链接时间更长
lto = true
# 控制一个包将被分割成多少个"代码生成单元"。更多的代码生成单元允许并行处理更多的包，可能会减少编译时间，但可能会产生较慢的代码
codegen-units = 1
# 决定 Rust 对程序使用哪种程度的优化，0-3 范围
opt-level = 3
# 删除调试信息优化打包大小
strip = true
# pinic: 恐慌时的操作 默认为 展开 或 中断，展开时候程序会将调用栈往回走，清理内存，中断时候会直接停止程序，需要操作系统清理内存，但是这样打出的包小
panic = "abort"
# 是否开启断言调试
debug-assertions = false
