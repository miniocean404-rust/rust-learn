# Cargo.toml 配置网址： https://doc.rust-lang.org/cargo/reference/manifest.html
[package]
name = "syntax"
description = "出现在搜索去的描述字段"
license = "MIT OR Apache-2.0"
keywords = ["learn", "base"]
version = "0.1.0"
author = "MiniOcean404"
edition = "2021"
exclude = ["index.node"] # 发布时要排除的文件。
include = ["/src", "COPYRIGHT", "/examples", "!/examples/big_example"] # 发布时要包含的文件。
rust-version = "1.65.0" # 最小 Rust 版本

# default-run = "main" # 在指定 bin 时候指定 cargo run --package [workspace] --bin [bin 下文件] 这个指令中  --bin [bin 下文件] 的默认执行

# [lib]
[[bin]]
name = "learn"
path = "./main.rs"

# 包库依赖项。
[dependencies]
# Rust 编译 .node 模块给 Nodejs 调用: https://neon-bindings.com/
# 开启可编译 wasm 的库，让 rs 支持 js 特性
getrandom = { version = "0.2.8", features = ["js"] }
rand = "0.8.5"
tokio = { version = "1.21.2", features = ["full"] }

# 示例、测试和基准测试的依赖关系。
[dev-dependencies]

# 构建脚本的依赖项。
[build-dependencies]

# cargo watch -x "run"
# cargo-watch = "8.1.2"

# profile 是构建环境，可以自定义 profile
# opt-level 决定 Rust 对程序使用哪种程度的优化，0-3 范围
[profile.dev]
opt-level = 0

[profile.release]
opt-level = 3
# pinic 时的操作 默认为 展开 可选改为中断
# 展开时候程序会将调用栈往回走，清理内存
# 中断时候会直接停止程序，需要系统清理内存，但是这样打出的包小
# panic = "abort"
